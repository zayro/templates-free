package local.display{	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.display.Loader;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.filters.BitmapFilter;	import flash.filters.ColorMatrixFilter;		import elemental.display.Rotator;	import elemental.effects.AlphaFade;	import elemental.effects.Tween;		import local.managers.PagingManager;	import local.managers.MouseManager;		public class GalleryButton extends Sprite	{		private static const yOffset:     int = 110;		private static const maxHeight:   int = 80;		private static const offAlpha: Number = 1;		private static const alphaEasing: int = 5;				private var xml: XML;		private var started: Boolean = false;		private var loaded: Boolean = false;		private var loader: Loader;		private var rotator: Rotator;				private var bwImage: Bitmap;		private var image: Bitmap				private static const r: Number = 0.212671;		private static const g: Number = 0.715160;		private static const b: Number = 0.072169;				private static const colorFilter: BitmapFilter = new ColorMatrixFilter(	[r,g,b,0,0,																				 r,g,b,0,0,																				 r,g,b,0,0,																				 0,0,0,1,0] );				public function GalleryButton(xml: XML = null) : void		{			if (xml == null)				return void;						rotator = new Rotator(0);			rotator.scaleX = rotator.scaleY = .3;			rotator.stop();						rotator.x = 30;			rotator.y = -(yOffset - (maxHeight >> 1));						this.xml = xml;			mouseChildren = false;						buttonMode = true;			useHandCursor = true;						alpha = offAlpha;		}				public function clear() : void		{			if (loaded)			{				removeEventListener(MouseEvent.MOUSE_OVER, onMouseOver);				removeEventListener(MouseEvent.MOUSE_OUT,  onMouseOut);				removeEventListener(MouseEvent.CLICK,      onClick);			}			else if (started)			{				rotator.stop();				rotator.visible = false;				loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, imageReady);				try { loader.close(); } catch (e: Error) {};				try { loader.unload(); } catch (e: Error) {};			}						AlphaFade.fadeOut(this, 6);			Tween.tween(this, "y", yOffset, 4);		}				public function start() : void		{			rotator.start();			addChild(rotator);			started = true;			loader = new Loader();			loader.load( new URLRequest(xml.@icon) );			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageReady);		}				private function imageReady(event: Event) : void		{			removeChild(rotator);			rotator.stop();			loaded = true;			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, imageReady);						addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			addEventListener(MouseEvent.MOUSE_OUT,  onMouseOut);			addEventListener(MouseEvent.CLICK,      onClick);						var pic: Bitmap = loader.content as Bitmap;						resize(pic, maxHeight);						pic.alpha = 0;			image = pic;						bwImage = new Bitmap(pic.bitmapData.clone());			bwImage.alpha = offAlpha;			bwImage.filters = new Array(colorFilter);			resize(bwImage, maxHeight);						addChild(bwImage);			addChild(pic);									this.dispatchEvent( new Event("NEXT", true) );		}				private function onMouseOver(event: MouseEvent) : void		{			AlphaFade.fadeTo(image, 1.01, alphaEasing);			MouseManager.showBubble(xml.@name);		}				private function onMouseOut(event: MouseEvent) : void		{			AlphaFade.fadeTo(image, 0, alphaEasing);			MouseManager.hideBubble();		}				private function onClick(event: MouseEvent) : void		{			var array: Array = new Array();						for each (var _xml: XML in xml.image)				array.push(_xml);							PagingManager.buffer = array;		}				private function resize(pic: Bitmap, dimension: Number) : void		{			pic.height = dimension; pic.scaleX = pic.scaleY;			pic.y = -yOffset;			pic.smoothing = true;		}	}}