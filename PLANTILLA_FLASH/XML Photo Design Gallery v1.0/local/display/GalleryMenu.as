package local.display{	import flash.display.Sprite;	import flash.events.Event;		import elemental.effects.Tween;		import local.display.GalleryButton;	import local.managers.PagingManager;	import local.managers.XmlManager;		public class GalleryMenu extends Sprite	{		private static const spacing: Number = 5;		private static const xStart:  Number = 200;				private var slider: Sprite;		public  var window: Sprite;;				private var children: Array;				private var title: String;		private var index: Number;		private var xIndex: Number;				private var scrollManager: SlideScrollManager;				public static var instance: GalleryMenu;				public function GalleryMenu() : void		{			slider = new Sprite();			window = new Sprite();						addChild(slider);						instance = this;			addEventListener("NEXT", loadNext);						scrollManager = new SlideScrollManager();			scrollManager.initialize( {target:slider, window:window, axis:"x"} );			scrollManager.home = -xStart+spacing;		}				public function show(xml: XML) : void		{			clear();			title = xml.@name;						for each (var client: XML in xml.client)				children.push( new GalleryButton(client) );							children[0].start();			children[0].x = xIndex;			slider.addChild(children[0]);						Tween.tween(slider, "x", -xStart+spacing, 4);			//scrollManager.setTarget(0);		}				public function clear() : void		{			XmlManager.statusText.text = "";						title = null;			index = 0;			xIndex = xStart;						for each (var gb: GalleryButton in children)				gb.clear();							children = new Array();			PagingManager.instance.visible = false;		}				private function loadNext(event: Event) : void		{						var old: GalleryButton = children[index];			var xIndex = old.x + old.width + spacing;						slider.graphics.clear();			slider.graphics.beginFill(0,0);trace(old.x + old.width + (xStart<<1))			slider.graphics.drawRect(-xStart, -110, old.x + old.width + (xStart<<1), 80);						if (++index < children.length)			{				var next: GalleryButton = children[index];				next.x = xIndex;				slider.addChild(next);				children[index].start();			}		}	}}	import flash.display.DisplayObject;	import flash.display.InteractiveObject;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		import elemental.effects.Tween;	import elemental.utils.Global;		internal class SlideScrollManager extends Object	{		public static const NORMAL: String = "NORMAL";		public static const EASED:  String = "EASED";				private var _target:  DisplayObject;		private var _window:  DisplayObject;		private var _mouse:   String;		private var _axis:    String;		private var _min:     Number;				public var mode: String = EASED;		public var ease: int    = 6;				public var offset: Number = 0;		public var home: Number;				private var total:    Number;		private var delim:    String;		private var trackAsMenu: Boolean;				public function initialize(initObj: Object) : void		{			_target  = initObj.target;			_window  = initObj.window;						if (initObj.axis)				_axis = initObj.axis;			else				_axis = "y";						var isX: Boolean = _axis == "x";			_mouse   = "mouseX"			delim    = "width";						_min = _target[_axis] + offset;						trackAsMenu = true;							setupDragging();		}				private function setupDragging() : void		{			if (trackAsMenu)				_target.addEventListener(MouseEvent.MOUSE_MOVE, windowMouseMove);		}				private function windowMouseMove(event: MouseEvent) : void		{			var place:   Number = (Global.stage.mouseX);			var percent: Number = place/Global.stage.stageWidth;			setTarget(percent);		}				public function set position(val: Number) : void		{			setTarget(val);		}				public function setTarget(percent: Number) : void		{			if (Global.stage.stageWidth > _target.width + (home<<1))			{				Tween.tween(_target, _axis, home, ease);				return void;			}						var newVal: Number = percent * (Global.stage.stageWidth - _target.width);						if (mode == NORMAL)				_target[_axis] = newVal;			else if (mode == EASED)				Tween.tween(_target, _axis, newVal, ease);		}	}