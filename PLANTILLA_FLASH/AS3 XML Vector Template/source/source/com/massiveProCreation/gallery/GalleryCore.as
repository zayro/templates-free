package com.massiveProCreation.gallery {		/*	*	import com.massiveProCreation.gallery.*;	*	var gallery:GalleryCore = new GalleryCore("gallery.xml", 3000);	*	addChild(gallery);	*/			/*/  IMPORTS /*/	import caurina.transitions.*;		import com.massiveProCreation.events.CustomEvent;	import com.massiveProCreation.utils.loaders.XMLLoader;			import flash.display.Bitmap;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.utils.Timer;	import flash.events.MouseEvent;

	public class GalleryCore extends Sprite {				//xml file		private var _xml:XML;		// xml loader		private var _xmlLoader:XMLLoader;		// image loader		protected var _imageLoader:Loader = new Loader();		// thumbnails loader		private var _thumbnailLoader:Loader = new Loader();		//current image		protected var _ci:int = 0; 		// current displayed		private var _cd:int  = -1;		// image container 		private var _image:Sprite;		// images array		protected var _images:Array = new Array();		// thumbnails array		private var _thumbnails:Array = new Array();		// slide show timer		protected var _slideShowTimer:Timer;		// effect type: fade, slide-right or slide-left		private static var _effect:String = "slide-right";				public function GalleryCore (xmlUrl:String, slideShowDelay:int) {						// setup slide show timer			_slideShowTimer = new Timer(slideShowDelay);			_slideShowTimer.addEventListener(TimerEvent.TIMER, nextImage , false, 0, true); 			//_slideShowTimer.start();			// create xml loader			_xmlLoader = new XMLLoader(xmlUrl);			_xmlLoader.addEventListener(CustomEvent.XML_LOADED, getXML);			this.addEventListener(Event.ADDED_TO_STAGE, addToStage, false, 0, true);			this.addEventListener(Event.REMOVED_FROM_STAGE, removeHandler, false, 0, true);					}		/*/<-- XML, THUMBNAILS, IMAGES LOADING -->/*/				/*/ XML LOADED /*/		private function getXML(e:CustomEvent):void {			//xml loaded			_xml = _xmlLoader.getXML();			//trace(_xml);			_imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoaded, false, 0 , true);						_thumbnailLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, thumbnailLoaded, false, 0, true);			loadImage(_ci);		}				/*/ IMAGE LOADING /*/		private function loadImage(imageToLoad:int):void {			//load images			_imageLoader.unload();			_imageLoader.load(new URLRequest(String(_xml.pic[imageToLoad].@image)));		}		protected function imageLoaded(e:Event):void {			// image loaded add it to array			_images.push(_imageLoader.content);			_images[_ci].smoothing = true;			if(_ci == 0 && _slideShowTimer.running){				nextImage();			}			// load thumbnail for the image			loadThumbnail(_ci);								}		/*/ TEST FUNCTION/*/		private function changeImage(e:TimerEvent):void {			// display random image			displayImage(Math.floor((Math.random() * _images.length)));			}		/*/ THUMBNAILS LOADING /*/		protected function loadThumbnail(thumbnailToLoad:int):void{			// load thumbnail			if(String(_xml.pic[thumbnailToLoad].@thumbnail) != ""){				_thumbnailLoader.unload();				_thumbnailLoader.load(new URLRequest(String(_xml.pic[thumbnailToLoad].@thumbnail)));			} else {				_ci++;						if(_ci < _xml.pic.length())					loadImage(_ci);					}		}		private function thumbnailLoaded(e:Event):void {			// thumbnail loaded			// add thumbanils to the array			_thumbnails.push(_thumbnailLoader.content);			// incerement curent image index			_ci++;								// if next image aveliable for loading, load it			if(_ci < _xml.pic.length())				loadImage(_ci);					// dispatch event if loaded				dispatchEvent(new CustomEvent(CustomEvent.THUMBNAIL_LOADED, true, false));				}		public function displayImage(toDisplay:int):void {			//trace("display image");			/*/ REMOVE OLD IMAGE /*/			if(this.getChildByName("image"+_cd) != null && toDisplay != _cd){				// play the "hide" effect for the curently displayed image				switch(_effect){					case "fade": 								Tweener.addTween(this.getChildByName("image"+_cd), {									alpha:0, time:1, transition:"easeOutExpo", 									onComplete:removeImage, onCompleteParams:[this.getChildByName("image"+_cd)] });								break;					case "slide-right":								Tweener.addTween(this.getChildByName("image"+_cd), {									x:stage.stageWidth + this.getChildByName("image"+_cd).width, time:1,									transition:"easeOutExpo", onComplete:removeImage,									onCompleteParams:[this.getChildByName("image"+_cd)] });								break;					case "slide-left":								Tweener.addTween(this.getChildByName("image"+_cd), {									x:- this.getChildByName("image"+_cd).width, time:1,									transition:"easeOutExpo", onComplete:removeImage,									onCompleteParams:[this.getChildByName("image"+_cd)] });								break;												}			}						/*/ ADD NEW IMAGE /*/			// add new image, and bitmap to the image sprite			if(toDisplay != _cd){				_image = new Sprite();				var bitmap:Bitmap ;						bitmap = new Bitmap (_images[toDisplay].bitmapData);				bitmap.smoothing = true;				_image.addChild(bitmap);				_image = resize(_image);				_image.x = (stage.stageWidth - _image.width) / 2;				_image.y = (stage.stageHeight - _image.height) / 2;				_image.name = "image"+toDisplay;				//if image wither then stage add new event				if(_image.width > stage.stageWidth){ 					trace("add mouseMove");					stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMove, false, 0, true);					}else{					trace("remove mouseMove");					stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);				}				// add this image				addChild(_image);									/*/ SHOW NEW IMAGE /*/				// show the next image effect				switch(_effect){					case "fade":										_image.alpha = 0;									Tweener.addTween(_image, {alpha:1, time:1, delay:0.25, transition:"easeOutExpo"});									break;					case "slide-right":										_image.x = -_image.width									Tweener.addTween(_image, {x:(stage.stageWidth - _image.width) / 2, time:1, transition:"easeOutExpo"});									break;					case "slide-left":										_image.x = stage.stageWidth+_image.width									Tweener.addTween(_image, {x:(stage.stageWidth - _image.width) / 2, time:1, transition:"easeOutExpo"});									break;													}				}						_cd = toDisplay;			// dispatch event when image is being changed			dispatchEvent(new CustomEvent(CustomEvent.IMAGE_CHANGE, true, false));			}		private function mouseMove(e:MouseEvent):void {			trace("mouseMove");			// scroll image effect			Tweener.addTween(this.getChildByName("image" +_cd), {x:(stage.stageWidth/2) -((mouseX - (stage.stageWidth/2)) * (  ((this.getChildByName("image" + _cd).width - stage.stageWidth)/2) / (stage.stageWidth/2))) - (this.getChildByName("image" + _cd).width * 0.5),																			time:1, transition:"easeOutExpo" });			e.updateAfterEvent();												}				/*/ SLIDE SHOW /*/				public function slideShowStart():void {			// start slide show			_slideShowTimer.start();		}		public function slideShowPause():void {			// pause slide show			_slideShowTimer.stop();		}		public function resetSlideShow():void {			// reset slide show			if(_slideShowTimer.running){				_slideShowTimer.reset();				_slideShowTimer.start();			}		}		/*/ NEXT AND PREVIEW IMAGE/*/				public function nextImage(e:TimerEvent = null):void {		//	trace("next" + e);					// change image, if image is the last one change it to the first image			if(_cd + 1 < _images.length)				displayImage(_cd+1);			 else if(_images.length > 0) 				displayImage(0);		}		public function previewImage():void {			// change image to the previews image			if(_cd > 0)				displayImage(_cd-1);			 else 				displayImage(_images.length-1);					}				/*/ REMOVE IMAGE FROM STAGE /*/		private function removeImage(obj:Sprite):void {			// remove image form the stage			this.removeChild(obj);			trace(obj.name + " removed");		}				/*/ RESIZE IMAGE TO STAGE SIZE /*/		protected function resize(tmp:Sprite):Sprite {			// resize image to fit the stage, stage height = image height, and the propotionaly stage width is set			var multiply:Number;			tmp.width *= 10;			tmp.height *= 10;						if(tmp.height > stage.stageHeight){				multiply = stage.stageHeight / tmp.height;				tmp.height = stage.stageHeight;				tmp.width = tmp.width * multiply			} 			if(tmp.width < stage.stageWidth && tmp.width > tmp.height){				multiply = stage.stageWidth / tmp.width;				tmp.width = stage.stageWidth;				tmp.height = tmp.height * multiply;			}						return tmp;		}				/*/<--GET-->/*/		public function get currentImage():int {			// return currently displayed image			return _cd;		}				public function get numberOfImages():int {			// return number of images			return _xml.pic.length();		}				public function get thumbnails():Array {			// return thumbnails array			return _thumbnails;		}						/*/-->SET<--/*/		public function set effect(fx:String):void {			// set gallery effect type			if(fx == "fade" || fx =="slide-right" || fx == "slide-left")				_effect = fx;		}						/*/ <-- STAGE EVENT HANDLERS -->/*/				/*/ ADDED TO STAGE /*/		private function addToStage(e:Event):void {			// add resize listener			stage.addEventListener(Event.RESIZE, resizeHandler, false, 0, true);		}				/*/ RESIZE HANDLER /*/		private function resizeHandler(e:Event):void {			// image resize handler			if(_image != null){				_image = resize(_image);				_image.x = (stage.stageWidth - _image.width) / 2;				_image.y = (stage.stageHeight - _image.height) / 2;			}			/*if(this.getChildByName("image"+_cd) != null){				resize(Sprite(this.getChildByName("image"+_cd)));				this.getChildByName("image"+_cd).x = (stage.stageWidth - this.getChildByName("image"+_cd).width) / 2;				this.getChildByName("image"+_cd).y = (stage.stageHeight - this.getChildByName("image"+_cd).height) / 2;				}*/		}				/*/ REMOVED FROM STAGE /*/		private function removeHandler(e:Event):void {			// if removed form stage, stop slide show and remove events			_slideShowTimer.stop();			_slideShowTimer.removeEventListener(TimerEvent.TIMER, nextImage);			stage.removeEventListener(Event.RESIZE, resizeHandler);		}	}}