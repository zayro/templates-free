package com.massiveProCreation.ball{		/*/ IMPORTS /*/	import caurina.transitions.*;		import com.massiveProCreation.events.CustomEvent;		import flash.display.BlendMode;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;

	public class BallMenu extends Sprite {		// data source for the menu		private var _source:Array;		// single menu button		private var _button:MenuButton;		// single menu subbutton		private var _subButton:MenuSubButton;		// xml		private var _xml:XML;		//  menu type		private var _type:String;		// index of button that is disabled		private var _offButton:int = -1;		// index of subbutton that is disabled		private var _offSubButton:int = -1;		// index of disabled button		private var _ob:int = -1;		// index of disabled subbutton		private var _osb:int = -1;		// text field format		private var _tf:TextFormat = new TextFormat();		// color transform		private var _ct:ColorTransform = new ColorTransform();		// font color		private static var _fontColor:uint;		// button color		private static var _buttonColor:uint;		// masker		private var _masker:Sprite = new Sprite();				public function BallMenu(source:XML, type:String = "bottom", fontColor:uint = 0xFFFFFF, buttonColor:uint = 0x000000){			// assign arguments form the constructor to the variables of class			_type = type;			_fontColor = fontColor;			_buttonColor = buttonColor;			_xml = source;			_tf.color = _fontColor;			_ct.color = _buttonColor;			this.addEventListener(Event.ADDED_TO_STAGE, added, false, 0 , true);		}		private function added(e:Event):void {			addButtons();		}		private function addButtons():void {			// loop that adds each button to the menu			for(var i:int = 0; i < _xml.menu[0].section.length(); i++){				//trace(_xml.menu[0].section[i].@name);				_button = new MenuButton();			//	button.bText.blendMode = BlendMode.LAYER;				// add button name				_button.bText.htmlText = String(_xml.menu[0].section[i].@name);				// turn on autoSize of the text field				_button.bText.autoSize = TextFieldAutoSize.LEFT 				// set text format				_button.bText.setTextFormat(_tf);				// set button background width				_button.bBG.width = _button.bText.width + 10;				// set the color of the button background				_button.bBG.getChildAt(0).transform.colorTransform = _ct;				//trace(_button.bText.width);				// button text position				_button.bText.x = 4;						// set button					_button.name = "button" + i;				// set button id				_button.id = i;				// set button mouseChildren and buttonMode property				_button.mouseChildren = false;				_button.buttonMode = true;				// add event lsiteners:click, rollOver, rollOut				_button.addEventListener(MouseEvent.CLICK, buttonClick, false, 0, true);				_button.addEventListener(MouseEvent.ROLL_OVER, buttonOver, false, 0, true);				_button.addEventListener(MouseEvent.ROLL_OUT, buttonOut, false, 0, true);							addChild(_button);				// set button x position				if(getChildByName("button"+(i-1)) != null)					_button.x = getChildByName("button"+(i-1)).x + getChildByName("button"+(i-1)).width + 1;									}			// dispatch first button rollOver and click event			this.getChildByName("button0").dispatchEvent(new MouseEvent(MouseEvent.ROLL_OVER));			this.getChildByName("button0").dispatchEvent(new MouseEvent(MouseEvent.CLICK));		}		private function buttonClick(e:MouseEvent):void {			//trace(e.target.id);						// if type is not equal to url then play click effect on the button 			if(_xml.menu[0].section[e.target.id].@type != "url"){				_offSubButton = -1;				_osb = -1;				// disable clicked button				e.target.removeEventListener(MouseEvent.CLICK, buttonClick);				e.target.removeEventListener(MouseEvent.ROLL_OUT, buttonOut);				e.target.removeEventListener(MouseEvent.ROLL_OVER, buttonOver);				e.target.buttonMode = false;				// if button has subsections open them				if (_xml.menu[0].section[_offButton].subsection.length() > 0) {					var del:int = 0;					for(var i:int = _xml.menu[0].section[_offButton].subsection.length() - 1; i >= 0  ; i--){						//trace(i);						if(getChildByName("subButton" + i) != null){							del++;							Tweener.addTween(getChildByName("subButton"+ i), {alpha:0, time:1, delay:del/10, transition:"easeOutExpo",							onComplete:removeButton, onCompleteParams:[getChildByName("subButton"+ i), i]});													}					}										} else if (_xml.menu[0].section[e.target.id].subsection.length() > 0 ) {					addSubButtons(e.target.id);				}				// add events to previuosly disabled photo				if(_offButton >= 0){					getChildByName("button"+_offButton).addEventListener(MouseEvent.CLICK, buttonClick, false, 0, true);					getChildByName("button"+_offButton).addEventListener(MouseEvent.ROLL_OUT, buttonOut, false, 0, true);					getChildByName("button"+_offButton).addEventListener(MouseEvent.ROLL_OVER, buttonOver, false, 0, true);					MovieClip(getChildByName("button"+_offButton)).buttonMode = true;					getChildByName("button"+_offButton).dispatchEvent(new MouseEvent(MouseEvent.ROLL_OUT));				} 				//trace("off = "+_offButton); 				_offButton = e.target.id;			}				_ob = e.target.id;				dispatchEvent(new CustomEvent(CustomEvent.BUTTON_CLICK, true, false));		}		private function removeButton(obj:MovieClip, i:int):void {			//remove obj			this.removeChild(obj);		//	trace("remove");			if(i == 0)				addSubButtons(_offButton);		}		private function addSubButtons(id:int):void {			var width:Number = 0;						//add subbuttons in for loop			for(var i:int = 0; i < _xml.menu[0].section[id].subsection.length(); i++){				_subButton = new MenuSubButton();				_subButton.bText.htmlText = String(_xml.menu[0].section[id].subsection[i].@name);				_subButton.bText.autoSize = TextFieldAutoSize.LEFT 				_subButton.bText.blendMode = BlendMode.LAYER;				_subButton.bText.setTextFormat(_tf);				_subButton.bar.width = _subButton.bBG.width = _subButton.bText.width + 8;				_subButton.bar.getChildAt(0).transform.colorTransform = _ct;				_subButton.bBG.getChildAt(0).transform.colorTransform = _ct;			//	trace(_xml.menu[0].section[id].subsection[i].@name);				_subButton.bText.x = 3;							_subButton.name = "subButton" + i;				_subButton.id = i;								_subButton.mouseChildren = false;				_subButton.buttonMode = true;								_subButton.addEventListener(MouseEvent.ROLL_OUT, subButtonOut, false, 0, true);				_subButton.addEventListener(MouseEvent.ROLL_OVER, subButtonOver, false, 0, true);				_subButton.addEventListener(MouseEvent.CLICK, subButtonClick, false, 0, true);								//_subButton.mask = _masker;				width += _subButton.width;				_subButton.alpha = 0;				addChild(_subButton);			}						for(i = 0; i < _xml.menu[0].section[id].subsection.length(); i++){										if(getChildByName("subButton"+(i-1)) != null){					getChildByName("subButton"+i).x = getChildByName("subButton"+(i-1)).x + getChildByName("subButton"+(i-1)).width + 1;				}else{					getChildByName("subButton"+i).x = (this.width - width) / 2				}				if(_type == "bottom")					getChildByName("subButton"+i).y = -22;				else					getChildByName("subButton"+i).y = 29;										getChildByName("subButton"+i).alpha = 0;				addChild(getChildByName("subButton"+i));												Tweener.addTween(getChildByName("subButton"+ i), {alpha:1, time:1, delay:i/10, transition:"easeOutExpo"});			}		}		private function subButtonClick(e:MouseEvent):void {			// click event for the sub button, almost the same as for the normal button, see explanation there 			if(_xml.menu[0].section[_offButton].subsection[e.target.id].@type != "url"){								Tweener.addTween(e.target.bar, {alpha:0.64, time:1, transition:"easeOutExpo"});									e.target.buttonMode = false;								e.target.removeEventListener(MouseEvent.ROLL_OUT, subButtonOut);				e.target.removeEventListener(MouseEvent.ROLL_OVER, subButtonOver);				e.target.removeEventListener(MouseEvent.CLICK, subButtonClick);						if(_offSubButton > -1){					MovieClip(getChildByName("subButton" + _offSubButton)).buttonMode = true;					getChildByName("subButton" + _offSubButton).addEventListener(MouseEvent.ROLL_OUT, subButtonOut, false, 0, true);					getChildByName("subButton" + _offSubButton).addEventListener(MouseEvent.ROLL_OVER, subButtonOver, false, 0, true);					getChildByName("subButton" + _offSubButton).addEventListener(MouseEvent.CLICK, subButtonClick, false, 0, true);					getChildByName("subButton" + _offSubButton).dispatchEvent(new MouseEvent(MouseEvent.ROLL_OUT));					Tweener.addTween(MovieClip(getChildByName("subButton" + _offSubButton)).bar, {alpha:0, time:1, transition:"easeOutExpo"});									}								_offSubButton = e.target.id;			}							_osb = e.target.id;			dispatchEvent(new CustomEvent(CustomEvent.SUBBUTTON_CLICK, true, false));		}				private function subButtonOver(e:MouseEvent):void {			// subbutton roll over effect			Tweener.addTween(e.target.bBG, {alpha:0.64, time:1, transition:"easeOutExpo"});		}		private function subButtonOut(e:MouseEvent):void {			// subbutton roll out effect			Tweener.addTween(e.target.bBG, {alpha:0.44, time:1, transition:"easeOutExpo"});		}		private function buttonOver(e:MouseEvent):void {			//button roll over effect			Tweener.addTween(e.target.bBG, {alpha:0.64, time:1, transition:"easeOutExpo"});		}		private function buttonOut(e:MouseEvent):void {			// button roll out effect			Tweener.addTween(e.target.bBG, {alpha:0.44, time:1, transition:"easeOutExpo"});		}		public function get activeButtonType():String{			// check active button type and return it, this function is used by the MainAS class			if(_xml.menu[0].section[_ob].subsection.length() > 0 && _osb > -1)				return String(_xml.menu[0].section[_ob].subsection[_osb].@type);			else if (_ob > -1)				return String(_xml.menu[0].section[_ob].@type);			else 				return "notChoosen";			}		public function get buttonOff():int {			// returns button that is currently off			return _ob;		}		public function get subButtonOff():int {			// returns subutton that is currently off			return _osb;		}	}}