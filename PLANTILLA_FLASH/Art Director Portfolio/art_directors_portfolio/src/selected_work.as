var isSelectedWorkLoaded:Boolean = false;var ITEM_HOLDER_WIDTH:Number = 156;var ITEM_HOLDER_HEIGHT:Number = 84;var ITEM_HOLDER_SPACING:Number = 12;var ITEM_HOLDER_PADDING:Number = 6;var ITEM_HOLDER_PADDING_BOTTOM:Number = 18;var THUMB_PATH:String = "selected_work/thumbs/";var IMAGE_PATH:String = "selected_work/images/";var PROJECT_PATH:String = "selected_work/projects/";var currentItemNumber:Number;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// PARSE XML//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////var TOTAL_ITEMS:Number;var ITEM:Object = new Object();ITEM.TITLE = new Array();ITEM.LINK = new Array();ITEM.CLIENT = new Array();ITEM.AGENCY = new Array();ITEM.YEAR = new Array();ITEM.ROLE = new Array();ITEM.THUMB_URL = new Array();ITEM.IMAGES = new Array();ITEM.ISNEW = new Array();var items_xml:XML = new XML();items_xml.ignoreWhite = true;items_xml.onLoad = function(success:Boolean) {	if(success) {		parseXML(this);		displaySelectedWork();		hidePreloader();		initSelectedWork();				if(addressState != "/about/" && addressState != "/contact/") {			initSection();		}				if(addressState.substr(1, 13) == "selected_work") {			deepLink();		}	}	else {		trace("error: loading xml");	}};// Load in XML and store in arraysfunction parseXML(theFile:XML) {	var rn:XMLNode = theFile.firstChild;	var il:Number = 0; // Images length	TOTAL_ITEMS = rn.childNodes.length;	for(var i:Number = 0; i < TOTAL_ITEMS; i++) {		var nextAvailable:Number = 0;				ITEM.TITLE.push(rn.childNodes[i].attributes.title);		ITEM.LINK.push(rn.childNodes[i].attributes.link);		ITEM.CLIENT.push(rn.childNodes[i].attributes.client);		ITEM.AGENCY.push(rn.childNodes[i].attributes.agency);		ITEM.YEAR.push(rn.childNodes[i].attributes.year);		ITEM.ROLE.push(rn.childNodes[i].attributes.role);		ITEM.THUMB_URL.push(rn.childNodes[i].attributes.thumb_url);				if(rn.childNodes[i].attributes.is_new != undefined && rn.childNodes[i].attributes.is_new != "false") {			ITEM.ISNEW.push(true);		}		else {			ITEM.ISNEW.push(false);		}				ITEM.IMAGES[i] = new Array();				if(rn.childNodes[i].firstChild.childNodes[nextAvailable] != null) {			ITEM.IMAGES[i][nextAvailable] = rn.childNodes[i].firstChild.childNodes[nextAvailable].attributes.url;			nextAvailable++;		}		if(rn.childNodes[i].firstChild.childNodes[nextAvailable] != null) {			ITEM.IMAGES[i][nextAvailable] = rn.childNodes[i].firstChild.childNodes[nextAvailable].attributes.url;			nextAvailable++;		}		if(rn.childNodes[i].firstChild.childNodes[nextAvailable] != null) {			ITEM.IMAGES[i][nextAvailable] = rn.childNodes[i].firstChild.childNodes[nextAvailable].attributes.url;			nextAvailable++;		}		if(rn.childNodes[i].firstChild.childNodes[nextAvailable] != null) {			ITEM.IMAGES[i][nextAvailable] = rn.childNodes[i].firstChild.childNodes[nextAvailable].attributes.url;			nextAvailable++;		}		if(rn.childNodes[i].firstChild.childNodes[nextAvailable] != null) {			ITEM.IMAGES[i][nextAvailable] = rn.childNodes[i].firstChild.childNodes[nextAvailable].attributes.url;			nextAvailable++;		}	}}function deepLink():Void {	var s:String = addressState;	s = s.substring(15, s.length-1);	var n:Number;		// Loop through all items and compare to addressState, if it's a match set currentItemNumber	for(var i:Number = 0; i < ITEM.THUMB_URL.length; i++) {		var t:String = ITEM.THUMB_URL[i];		t = t.substr(0, -4);		if(s == t) {			n = i;			break;		}	}		if(n != undefined) {		hideMoreWork();		currentItemNumber = n;		displayDetailView();	}}this.createEmptyMovieClip("selectedWork_mc", 10000);selectedWork_mc._x = COLUMN2;selectedWork_mc._y = ROW2 + 18;function disablePage(which:Number):Void {	var tBtn:MovieClip = eval("mw.page" + which + "_btn");	var tText:MovieClip = eval("mw.page" + which + "Text_mc");	var tBg:MovieClip = eval("mw.page" + which + "Bg_mc");	tBtn.enabled = false;	Tweener.addTween(tText, {_alpha:20, time:0.7, transition:"linear"});	Tweener.addTween(tBg, {_alpha:20, time:0.7, transition:"linear"});}function enablePage(which:Number):Void {	var tBtn:MovieClip = eval("mw.page" + which + "_btn");	var tText:MovieClip = eval("mw.page" + which + "Text_mc");	var tBg:MovieClip = eval("mw.page" + which + "Bg_mc");	tBtn.enabled = true;	Tweener.addTween(tText, {_alpha:100, time:0.7, transition:"linear"});	Tweener.addTween(tBg, {_alpha:80, time:0.7, transition:"linear"});}function displayMoreWork():Void {	disablePage(1);	enablePage(2);	mw._visible = true;}function hideMoreWork():Void {	mw._visible = false;}hideMoreWork();var CORNER_SIZE:Number = 2;function createItemHolder(n:Number):Void {	selectedWork_mc.createEmptyMovieClip("itemHolder" + n + "_mc", 10100 + n);	var c:MovieClip = eval("selectedWork_mc." + "itemHolder" + n + "_mc");		var bg:MovieClip = c.createEmptyMovieClip("itemHolderBg" + n + "_mc", 10151 + n);	with(bg) {		lineStyle(undefined, 0x000000, 60);		beginFill(THUMB_BACKGROUND_COLOR, 100);		moveTo(0, 0);		lineTo(ITEM_HOLDER_WIDTH, 0);		lineTo(ITEM_HOLDER_WIDTH, ITEM_HOLDER_HEIGHT - CORNER_SIZE);		lineTo(ITEM_HOLDER_WIDTH - CORNER_SIZE, ITEM_HOLDER_HEIGHT);		lineTo(0, ITEM_HOLDER_HEIGHT);		endFill(0, 0);	}		var t:TextField = c.createTextField("item" + n + "_txt", 10200, 0, 0, 146, 30);	t.text = ITEM.TITLE[n];	t._x = 3;	t._y = ITEM_HOLDER_HEIGHT - 15;	t.multiline = false;	t.wordWrap = false;	t.embedFonts = true;	t.selectable = false;	t.antiAliasType = "advanced";	var item_fmt:TextFormat = new TextFormat();	item_fmt.color = THUMB_TEXT_COLOR;	item_fmt.font = "L VAG Rounded Light";	item_fmt.size = 11;	t.setTextFormat(item_fmt);		// Create loading... text	var l:TextField = c.createTextField("item" + n + "_txt", 10225, 0, 0, 146, 30);	l.text = "Loading...";	l._x = 50;	l._y = 30;	l.selectable = false;	var loading_fmt:TextFormat = new TextFormat();	loading_fmt.color = 0x666666;	loading_fmt.font = "Georgia";	loading_fmt.size = 11;	loading_fmt.italic = true;	l.setTextFormat(loading_fmt);		var thumbHolder:MovieClip = c.createEmptyMovieClip("thumbHolder" + n + "_mc", 10250 + n);	thumbHolder._x = ITEM_HOLDER_PADDING;	thumbHolder._y = ITEM_HOLDER_PADDING;		var thumbPath:String = THUMB_PATH + ITEM.THUMB_URL[n];	var thumb_mcl:MovieClipLoader = new MovieClipLoader();	var loaderListener:Object = new Object();	thumb_mcl.addListener(loaderListener);		Tweener.addTween(thumbHolder, {_alpha:0, time:0});		loaderListener.onLoadComplete= function(loadTarget){		l.removeTextField();		Tweener.addTween(loadTarget, {_alpha:100, time:0.5});	}		thumb_mcl.loadClip(thumbPath, thumbHolder);		if(ITEM.ISNEW[n]) {		var newGraphic:MovieClip = c.attachMovie("new_id", "newGraphic" + n + "_mc", 10750 + n);		Tweener.addTween(newGraphic, {_color:NEW_ICON_COLOR, time:0});		newGraphic._x = 113;		newGraphic._y = 71;	}		var thumbArrow:MovieClip = c.attachMovie("thumbArrow_id", "thumbArrow" + n + "_mc", 10350 + n);	Tweener.addTween(thumbArrow, {_color:THUMB_TEXT_COLOR, time:0});	thumbArrow._x = ITEM_HOLDER_WIDTH - ITEM_HOLDER_PADDING - thumbArrow._width;	thumbArrow._y = ITEM_HOLDER_HEIGHT - ITEM_HOLDER_PADDING - thumbArrow._height - 2;		var itemBorder:MovieClip = c.createEmptyMovieClip("itemBorder" + n + "_mc", 10400 + n);	with(itemBorder) {		lineStyle(1, THUMB_BORDER_COLOR, 100);		moveTo(ITEM_HOLDER_PADDING, ITEM_HOLDER_PADDING);		lineTo(ITEM_HOLDER_WIDTH - ITEM_HOLDER_PADDING - 1, ITEM_HOLDER_PADDING);		lineTo(ITEM_HOLDER_WIDTH - ITEM_HOLDER_PADDING - 1, ITEM_HOLDER_HEIGHT - ITEM_HOLDER_PADDING_BOTTOM - 1);		lineTo(ITEM_HOLDER_PADDING, ITEM_HOLDER_HEIGHT - ITEM_HOLDER_PADDING_BOTTOM - 1);		lineTo(ITEM_HOLDER_PADDING, ITEM_HOLDER_PADDING);	}}function setItemEventHandlers():Void {	for(var i:Number = 0; i < TOTAL_ITEMS; i++) {		var c:MovieClip = eval("selectedWork_mc." + "itemHolder" + i + "_mc");				// Save the i counter for reference		c.i = i;				c.onRollOver = function() {			var TIME:Number = 0.6;			var TRAN:String = "easeoutquint";						var bg:MovieClip = eval(this + ".itemHolderBg" + this.i + "_mc");			Tweener.addTween(bg, {_alpha:0, time:TIME, transition:TRAN});						var border:MovieClip = eval(this + ".itemBorder" + this.i + "_mc");			Tweener.addTween(border, {_color:THUMB_ROLLOVER_COLOR, time:TIME, transition:TRAN});						var arrow:MovieClip = eval(this + ".thumbArrow" + this.i + "_mc");			Tweener.addTween(arrow, {_color:THUMB_ROLLOVER_COLOR, time:TIME, transition:TRAN});						var t:MovieClip = eval(this + ".item" + this.i + "_txt");			Tweener.addTween(t, {_color:THUMB_TEXT_ROLLOVER_COLOR, time:TIME, transition:TRAN});		};			c.onRelease = function() {			hideMoreWork();			currentItemNumber = this.i;			displayDetailView();		};				c.onRollOut = c.onReleaseOutside = function() {			var TIME:Number = 0.3;			var TRAN:String = "easeoutquint";						var bg:MovieClip = eval(this + ".itemHolderBg" + this.i + "_mc");			Tweener.addTween(bg, {_color:null, _alpha:100, time:TIME, transition:TRAN});						var border:MovieClip = eval(this + ".itemBorder" + this.i + "_mc");			Tweener.addTween(border, {_color:null, time:TIME, transition:TRAN});						var arrow:MovieClip = eval(this + ".thumbArrow" + this.i + "_mc");			Tweener.addTween(arrow, {_color:THUMB_TEXT_COLOR, time:TIME, transition:TRAN});						var t:MovieClip = eval(this + ".item" + this.i + "_txt");			Tweener.addTween(t, {_color:null, time:TIME, transition:TRAN});		};	}}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// MORE WORK//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////var mw:MovieClip = selectedWork_mc.attachMovie("moreWork_id", "moreWork_mc", 10002);selectedWork_mc.moreWork_mc._y = -26;Tweener.addTween(mw.page1Bg_mc, {_color:BUTTON_COLOR, _alpha:80, time:0});Tweener.addTween(mw.page2Bg_mc, {_color:BUTTON_COLOR, _alpha:80, time:0});mw.page1_btn.onRollOver = function() {	Tweener.addTween(mw.page1Bg_mc, {_color:BUTTON_ROLLOVER_COLOR, time:0.5});}mw.page1_btn.onRelease = function() {	Tweener.addTween(mw.page1Bg_mc, {_color:BUTTON_ROLLOVER_COLOR, time:0.5});	disablePage(1);	enablePage(2);	positionItems();}mw.page1_btn.onRollOut = mw.page1_btn.onReleaseOutside = function() {	Tweener.addTween(mw.page1Bg_mc, {_color:BUTTON_COLOR, time:0.5});}mw.page2_btn.onRollOver = function() {	Tweener.addTween(mw.page2Bg_mc, {_color:BUTTON_ROLLOVER_COLOR, time:0.5});}mw.page2_btn.onRelease = function() {	Tweener.addTween(mw.page2Bg_mc, {_color:BUTTON_COLOR, time:0.5});	disablePage(2);	enablePage(1);	displayHiddenItems();	hideVisibleItems();}mw.page2_btn.onRollOut = mw.page1_btn.onReleaseOutside = function() {	Tweener.addTween(mw.page2Bg_mc, {_color:BUTTON_COLOR, time:0.7});}var itemsWidth:Number;function positionItems():Void {	// Accumlative width of each row	var totalW1:Number = 0;	var totalW2:Number = 0;	var totalW3:Number = 0;	var totalW4:Number = 0;	var totalW5:Number = 0;		var totalH4:Number = 0;	var totalH5:Number = 0;		var isRow1Full:Boolean = false;	var isRow2Full:Boolean = false;	var isRow3Full:Boolean = false;	var isRow4Full:Boolean = false;	var isRow5Full:Boolean = false;		// Number of items in each row	var firstRowCounter:Number = 0;	var secondRowCounter:Number = 0;	var thirdRowCounter:Number = 0;	var fourthRowCounter:Number = 0;	var fifthRowCounter:Number = 0;		for(var i:Number = 0; i < TOTAL_ITEMS; i++) {		var c:MovieClip = eval("selectedWork_mc." + "itemHolder" + i + "_mc");		var W:Number = Stage.width - COLUMN2 - (ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING) - (PADDING_SITE + PADDING_SIDE - 26);		var H:Number = Stage.height - ROW2 - (ITEM_HOLDER_HEIGHT + ITEM_HOLDER_SPACING) - (PADDING_SITE + PADDING_SIDE - 50);				// If row 1 isn't full, fill it up		if(!isRow1Full) {			c._visible = true;						c._x = (ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING) * firstRowCounter;			c._y = 0;			firstRowCounter++;						totalW1 += ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING;			itemsWidth = totalW1;			isRow2Full = true;			isRow3Full = true;			if(totalW1 > W) {				isRow1Full = true;				isRow2Full = false;			}		}				// If row 2 isn't full, fill it up		else if(!isRow2Full) {			c._visible = true;						c._x = (ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING) * secondRowCounter;			c._y = ITEM_HOLDER_HEIGHT + ITEM_HOLDER_SPACING;			secondRowCounter++;						totalW2 += ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING;			isRow3Full = true;			if(totalW2 > W) {				isRow2Full = true;				isRow3Full = false;			}		}				// If row 3 isn't full, fill it up		else if(!isRow3Full) {			c._visible = true;						c._x = (ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING) * thirdRowCounter;			c._y = (ITEM_HOLDER_HEIGHT + ITEM_HOLDER_SPACING) * 2;			thirdRowCounter++;						totalW3 += ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING;			isRow4Full = true;			if(totalW3 > W) {				isRow3Full = true;				isRow4Full = false;			}		}				// If row 4 isn't full, fill it up		else if(!isRow4Full) {			c._visible = true;						c._x = (ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING) * fourthRowCounter;			c._y = (ITEM_HOLDER_HEIGHT + ITEM_HOLDER_SPACING) * 3;			fourthRowCounter++;						totalW4 += ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING;			isRow5Full = true;						totalH4 = (ITEM_HOLDER_HEIGHT + ITEM_HOLDER_SPACING) * 4;						if(totalW4 > W) {				isRow4Full = true;				isRow5Full = false;			}			if(totalH4 > H) {				c._visible = false;			}		}				// If row 5 isn't full, fill it up		else if(!isRow5Full) {			c._visible = true;						c._x = (ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING) * fifthRowCounter;			c._y = (ITEM_HOLDER_HEIGHT + ITEM_HOLDER_SPACING) * 4;			fifthRowCounter++;						totalH5 = (ITEM_HOLDER_HEIGHT + ITEM_HOLDER_SPACING) * 5;						if(totalW5 > W) {				c._visible = false;			}			if(totalH5 > H) {				c._visible = false;			}			totalW5 += ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING;		}	}		detectHiddenItems();	detectVisibleItems();}var hiddenItems_array:Array = new Array();function detectHiddenItems():Void {	hiddenItems_array.length = 0;	for(var i:Number = 0; i < TOTAL_ITEMS; i++) {		var c:MovieClip = eval("selectedWork_mc." + "itemHolder" + i + "_mc");		if(c._visible == false) {			hiddenItems_array.push(c._name);		}	}	if(hiddenItems_array.length > 0) {		displayMoreWork();	}	else {		hideMoreWork();	}}function displayHiddenItems():Void {	for(var i:Number = 0; i < hiddenItems_array.length; i++) {		var c:MovieClip = eval("selectedWork_mc." + hiddenItems_array[i]);		c._visible = true;	}	positionHiddenItems();}function positionHiddenItems():Void {	// Accumlative width of each row	var totalW1:Number = 0;	var totalW2:Number = 0;	var totalW3:Number = 0;		var isRow1Full:Boolean = false;	var isRow2Full:Boolean = false;	var isRow3Full:Boolean = false;		// Number of items in each row	var firstRowCounter:Number = 0;	var secondRowCounter:Number = 0;	var thirdRowCounter:Number = 0;		for(var i:Number = 0; i < hiddenItems_array.length; i++) {		var c:MovieClip = eval("selectedWork_mc." + hiddenItems_array[i]);		var W:Number = Stage.width - COLUMN2 - (ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING) - (PADDING_SITE + PADDING_SIDE - 26);				// If row 1 isn't full, fill it up		if(!isRow1Full) {			c._x = (ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING) * firstRowCounter;			c._y = 0;			firstRowCounter++;			totalW1 += ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING;			itemsWidth = totalW1;			isRow2Full = true;			isRow3Full = true;			if(totalW1 > W) {				isRow1Full = true;				isRow2Full = false;			}		}				// If row 2 isn't full, fill it up		else if(!isRow2Full) {			c._x = (ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING) * secondRowCounter;			c._y = ITEM_HOLDER_HEIGHT + ITEM_HOLDER_SPACING;			secondRowCounter++;			totalW2 += ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING;			isRow3Full = true;			if(totalW2 > W) {				isRow2Full = true;				isRow3Full = false;			}		}				// If row 3 isn't full, fill it up		else if(!isRow3Full) {			c._x = (ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING) * thirdRowCounter;			c._y = (ITEM_HOLDER_HEIGHT + ITEM_HOLDER_SPACING) * 2;			thirdRowCounter++;						totalW3 += ITEM_HOLDER_WIDTH + ITEM_HOLDER_SPACING;			if(totalW3 > W) {				isRow3Full = true;			}		}	}}var visibleItems_array:Array = new Array();function detectVisibleItems():Void {	visibleItems_array.length = 0;	for(var i:Number = 0; i < TOTAL_ITEMS; i++) {		var c:MovieClip = eval("selectedWork_mc." + "itemHolder" + i + "_mc");		if(c._visible == true) {			visibleItems_array.push(c._name);		}	}}function hideVisibleItems():Void {	for(var i:Number = 0; i < visibleItems_array.length; i++) {		var c:MovieClip = eval("selectedWork_mc." + visibleItems_array[i]);		c._visible = false;	}}function displaySelectedWork():Void {	selectedWork_mc._visible = true;	Tweener.addTween(selectedWork_mc, {_alpha:100, time:0.5, transition:"linear", delay:NAV_DELAY});	Tweener.addTween(selectedWork_mc, {_blur_blurX:0, time:0.5, transition:"easeoutquad", delay:NAV_DELAY});}function hideSelectedWork():Void {	Tweener.addTween(selectedWork_mc, {_alpha:0, time:0.5, transition:"linear", delay:0, onComplete:function() { this._visible = false; }});	Tweener.addTween(selectedWork_mc, {_blur_blurX:10, time:0.5, transition:"easeoutquad"});}Tweener.addTween(selectedWork_mc, {_alpha:0, time:0});Tweener.addTween(selectedWork_mc, {_blur_blurX:10, time:0});selectedWork_mc._visible = false;function initSelectedWork():Void {	if(!isSelectedWorkLoaded) {		//Tweener.addTween(baseNotch_mc, {time:0.5, delay:1, onComplete:setItemEventHandlers});		//setItemEventHandlers();	}	isSelectedWorkLoaded = true;		// Create item holders for portfolio items	for(var i:Number = 0; i < TOTAL_ITEMS; i++) {		createItemHolder(i);	}	setItemEventHandlers();	positionItems();	resizeSite();}#include "detail_view.as"