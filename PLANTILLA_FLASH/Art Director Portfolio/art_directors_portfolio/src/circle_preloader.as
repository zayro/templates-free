var CIRCLE_SEGMENTS:Number = 45;var CIRCLE_DIAMETER:Number = 10;var CIRCLE_THICKNESS:Number = 1;var CIRCLE_ALPHA:Number = 100;var revolutions:Number = 0;var angle:Number = CIRCLE_SEGMENTS/180;var radians:Number = (360/CIRCLE_SEGMENTS)*Math.PI/180;this.createEmptyMovieClip("preloaderHolder_mc", 13500);preloaderHolder_mc._x = 100;preloaderHolder_mc._y = 100;function drawCircles(color:Number, target:MovieClip):Void {	for(var i:Number = 0; i < CIRCLE_SEGMENTS; i++) {		target.createEmptyMovieClip("circle"+i, 14000 + i);		var t:MovieClip = eval("target.circle" + i);		t.filters = [new flash.filters.BlurFilter()];		t.blur = 10;		drawCircle(t, CIRCLE_THICKNESS, color, CIRCLE_ALPHA);		t._x = Math.sin(radians*i)*CIRCLE_DIAMETER;		t._y = Math.cos(radians*i)*CIRCLE_DIAMETER;		t._alpha = i*(100/CIRCLE_SEGMENTS);	}}function fadeCircles():Void {	for(var i:Number = 0; i < CIRCLE_SEGMENTS; i++) {		if(this["circle"+i]._alpha <= 0) {			this["circle"+i]._alpha = 100;		}		this["circle"+i]._alpha -= 3;	}	if(this["circle" + (CIRCLE_SEGMENTS - 1)]._alpha <= 0) {		revolutions++;	}}function drawCircle(target_mc:MovieClip, radius:Number, fillColor:Number, fillAlpha:Number):Void {	var x:Number = radius;	var y:Number = radius;		with(target_mc) {		beginFill(fillColor, fillAlpha);		moveTo(x+radius, y);		curveTo(radius+x, Math.tan(Math.PI/8)*radius+y, Math.sin(Math.PI/4)*radius+x, Math.sin(Math.PI/4)*radius+y);		curveTo(Math.tan(Math.PI/8)*radius+x, radius+y, x, radius+y);		curveTo(-Math.tan(Math.PI/8)*radius+x, radius+y, -Math.sin(Math.PI/4)*radius+x, Math.sin(Math.PI/4)*radius+y);		curveTo(-radius+x, Math.tan(Math.PI/8)*radius+y, -radius+x, y);		curveTo(-radius+x, -Math.tan(Math.PI/8)*radius+y, -Math.sin(Math.PI/4)*radius+x, -Math.sin(Math.PI/4)*radius+y);		curveTo(-Math.tan(Math.PI/8)*radius+x, -radius+y, x, -radius+y);		curveTo(Math.tan(Math.PI/8)*radius+x, -radius+y, Math.sin(Math.PI/4)*radius+x, -Math.sin(Math.PI/4)*radius+y);		curveTo(radius+x, -Math.tan(Math.PI/8)*radius+y, radius+x, y);		endFill();	}}drawCircles(PRELOADER_COLOR, preloaderHolder_mc);preloaderHolder_mc._visible = false;